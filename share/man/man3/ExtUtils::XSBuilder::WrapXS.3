.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XSBuilder::WrapXS 3"
.TH XSBuilder::WrapXS 3 "2005-08-31" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::XSBuilder::WrapXS \- create perl XS wrappers for C functions
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
For more information, see ExtUtils::XSBuilder
.SS "new_parsesource (o)"
.IX Subsection "new_parsesource (o)"
Returns an array ref of new ParseSource objects for all source files that 
should be used to generate \s-1XS\s0 files
.SS "new_typemap (o)"
.IX Subsection "new_typemap (o)"
Returns a new typemap object
.SS "new_podtemplate (o)"
.IX Subsection "new_podtemplate (o)"
Returns a new podtemplate object
.SS "xs_includes (o)"
.IX Subsection "xs_includes (o)"
Returns a list of \s-1XS\s0 include files.
.PP
Default: use all include files that \f(CW\*(C`ParseSource::find_includes\*(C'\fR returns, but
strip path info
.SS "xs_glue_dirs (o)"
.IX Subsection "xs_glue_dirs (o)"
Returns a list of additional \s-1XS\s0 glue directories to seach for maps in.
.SS "xs_base_dir (o)"
.IX Subsection "xs_base_dir (o)"
Returns a directory which serves as a base for other directories.
.PP
Default: \f(CW\*(Aq.\*(Aq\fR
.SS "xs_map_dir (o)"
.IX Subsection "xs_map_dir (o)"
Returns the directory to search for map files in
.PP
Default: \f(CW\*(C`<xs_base_dir\*(C'\fR/xsbuilder/maps>
.SS "xs_incsrc_dir (o)"
.IX Subsection "xs_incsrc_dir (o)"
Returns the directory to search for files to include into the source. For
example, \f(CW\*(C`<xs_incsrc_dir\*(C'\fR/Apache/DAV/Resource/Resource_pm> will be included into
the \f(CW\*(C`Apache::DAV::Resource\*(C'\fR module.
.PP
Default: \f(CW\*(C`<xs_base_dir\*(C'\fR/xsbuilder>
.SS "xs_include_dir (o)"
.IX Subsection "xs_include_dir (o)"
Returns a directory to search for include files for pm and \s-1XS\s0
.PP
Default: \f(CW\*(C`<xs_base_dir\*(C'\fR/xsinclude>
.SS "xs_target_dir (o)"
.IX Subsection "xs_target_dir (o)"
Returns the directory to write generated \s-1XS\s0 and header files in
.PP
Default: \f(CW\*(C`<xs_base_dir\*(C'\fR/xs>
.SS "makefilepl_text (o)"
.IX Subsection "makefilepl_text (o)"
Returns text for Makefile.PL
.SS "h_filename_prefix (o)"
.IX Subsection "h_filename_prefix (o)"
Defines a prefix for generated header files
.PP
Default: \f(CW\*(Aqxs_\*(Aq\fR
.SS "my_xs_prefix (o)"
.IX Subsection "my_xs_prefix (o)"
Defines a prefix used for all \s-1XS\s0 functions
.PP
Default: \f(CW\*(Aqxs_\*(Aq\fR
.SS "my_cnv_prefix (o)"
.IX Subsection "my_cnv_prefix (o)"
Defines a prefix used for all conversion functions/macros.
.PP
Default: \f(CW\*(C`my_xs_prefix\*(C'\fR
.SS "needs_prefix (o, name)"
.IX Subsection "needs_prefix (o, name)"
Returns true if the passed name should be prefixed
.SS "pm_text (o, module, isa, code)"
.IX Subsection "pm_text (o, module, isa, code)"
Returns the text of a \f(CW\*(C`.pm\*(C'\fR file, or undef if no \f(CW\*(C`.pm\*(C'\fR file should be
written.
.PP
Default: Create a \f(CW\*(C`.pm\*(C'\fR file which bootstraps the \s-1XS\s0 code
.SS "mapline_elem  (o, elem)"
.IX Subsection "mapline_elem  (o, elem)"
Called for each structure element that is written to the map file by
checkmaps. Allows the user to change the element name, for example
adding a different perl name.
.PP
Default: returns the element unmodified
.SS "mapline_func  (o)"
.IX Subsection "mapline_func  (o)"
Called for each function that is written to the map file by checkmaps. Allows
the user to change the function name, for example adding a different perl
name.
.PP
Default: returns the element unmodified
